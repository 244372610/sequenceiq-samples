apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'scala'
version = '1.0'

targetCompatibility = 1.7

repositories{
    maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    mavenCentral()
}

tasks.withType(ScalaCompile) {
    targetCompatibility = 1.7
    scalaCompileOptions.deprecation = false
    scalaCompileOptions.unchecked = false
    scalaCompileOptions.additionalParameters = ['-nowarn']
    options.warnings = false
    options.compilerArgs = ["-Xmax-classfile-name 130"]
}

compileJava {
    targetCompatibility = 1.7
}

sourceSets {
    test {
        runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
    }
}

test {
    useTestNG()
    ext.workingDirectory = 'build/'
}

dependencies {
    testCompile "org.testng:testng:6.8.8"
    // Scala
    compile("org.scala-lang:scala-library:${scalaVersion}")
    // Spark
    compile("org.apache.spark:spark-core_2.10:${sparkVersion}")
    compile("org.apache.spark:spark-mllib_2.10:${sparkVersion}")
    // Hadoop
    compile("org.apache.hadoop:hadoop-client:${hadoopVersion}")
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

test {
    include 'com/sequenceiq/**'
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}
